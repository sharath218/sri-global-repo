{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport styles from '../styles/ContactForm.module.css';\nimport firebase from '../server/firebase';\nimport Select from './Select';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nconst initialValues = {\n  Name: '',\n  Email: '',\n  PhoneNumber: '',\n  Place: '',\n  Service: ''\n};\nconst validationSchema = Yup.object({\n  Name: Yup.string().required('Please Enter Parent Name'),\n  Email: Yup.string().email('Invalid email format').required('Email Required'),\n  PhoneNumber: Yup.string().matches(/^[6-9]\\d{9}$/, {\n    message: \"Please enter valid number.\",\n    excludeEmptyString: false\n  }).required('Phone number is required'),\n  Place: Yup.string().required('Please Choose a place'),\n  Service: Yup.string().required('Please Choose a place')\n});\nconst placeOptions = [{\n  key: 'Select a Place',\n  value: ''\n}, {\n  key: 'Place1',\n  value: 'Place1'\n}, {\n  key: 'Place2',\n  value: 'Place2'\n}, {\n  key: 'None',\n  value: 'None'\n}];\nconst serviceOptions = [{\n  key: 'Select a Place',\n  value: ''\n}, {\n  key: 'Place1',\n  value: 'Place1'\n}, {\n  key: 'Place2',\n  value: 'Place2'\n}, {\n  key: 'None',\n  value: 'None'\n}];\n\nconst ContactForm = () => {\n  const {\n    0: success,\n    1: setSuccess\n  } = useState(false);\n\n  async function registerUser(values, {\n    setSubmitting,\n    resetForm\n  }) {\n    console.log('Form data', values);\n    console.log('form  submit start');\n    const db = firebase.firestore();\n    await db.collection('usersdb').add({\n      Name: values.Name,\n      Email: values.Email,\n      PhoneNumber: values.PhoneNumber,\n      Place: values.Place,\n      Service: values.Service,\n      dateCreated: new Date()\n    }).then(function () {\n      resetForm();\n      setSubmitting(false);\n      setSuccess(true);\n    }).catch(function (error) {// console.error(\"Error writing document: \", error);\n    });\n    console.log('form  submit end');\n  }\n\n  return __jsx(Formik, {\n    initialValues: initialValues,\n    validationSchema: validationSchema,\n    onSubmit: (values, {\n      setSubmitting,\n      resetForm\n    }) => {\n      setSuccess(false);\n      registerUser(values, {\n        setSubmitting,\n        resetForm\n      });\n    }\n  }, ({\n    isSubmitting,\n    isValid\n  }) => __jsx(\"div\", {\n    className: styles.contactForm\n  }, success ? __jsx(\"p\", {\n    className: styles.succesmsg\n  }, \" Form Submission successful \\u2714\\uFE0F\") : null, isSubmitting ? __jsx(\"div\", {\n    className: styles.loader\n  }, \" \") : __jsx(Form, {\n    className: styles.form\n  }, __jsx(\"h1\", {\n    style: {\n      margin: \"0px 0px\"\n    }\n  }, \"Contact Us\"), __jsx(\"label\", {\n    htmlFor: \"Name\",\n    className: styles.formLabel\n  }, __jsx(\"span\", {\n    className: styles.contentName\n  }, \"Name\")), __jsx(Field, {\n    className: styles.formInput,\n    type: \"text\",\n    id: \"Name\",\n    name: \"Name\"\n  }), __jsx(\"p\", {\n    className: styles.ErrorMessage\n  }, __jsx(ErrorMessage, {\n    name: \"Name\"\n  }), \" \"), __jsx(\"label\", {\n    htmlFor: \"Email\",\n    className: styles.formLabel\n  }, __jsx(\"span\", {\n    className: styles.contentName\n  }, \"Email\")), __jsx(Field, {\n    className: styles.formInput,\n    type: \"text\",\n    id: \"Email\",\n    name: \"Email\"\n  }), __jsx(\"p\", {\n    className: styles.ErrorMessage\n  }, __jsx(ErrorMessage, {\n    name: \"Email\"\n  })), __jsx(\"label\", {\n    htmlFor: \"PhoneNumber\",\n    className: styles.formLabel\n  }, __jsx(\"span\", {\n    className: styles.contentName\n  }, \"Phone Number\")), __jsx(Field, {\n    className: styles.formInput,\n    type: \"tel\",\n    id: \"PhoneNumber\",\n    name: \"PhoneNumber\"\n  }), __jsx(\"p\", {\n    className: styles.ErrorMessage\n  }, __jsx(ErrorMessage, {\n    name: \"PhoneNumber\"\n  }), \" \"), __jsx(Select, {\n    name: \"Place\",\n    options: placeOptions,\n    className: styles.selectInput\n  }), __jsx(\"p\", {\n    className: styles.ErrorMessage\n  }, __jsx(ErrorMessage, {\n    name: 'Place'\n  })), __jsx(Select, {\n    name: \"Service\",\n    options: serviceOptions,\n    className: styles.selectInput\n  }), __jsx(\"p\", {\n    className: styles.ErrorMessage\n  }, __jsx(ErrorMessage, {\n    name: 'Service'\n  }), \" \"), __jsx(\"button\", {\n    disabled: !isValid || isSubmitting,\n    type: \"submit\",\n    className: styles.btnHover,\n    style: !isValid || isSubmitting ? {\n      type: 'disabled',\n      background: '#dddddd',\n      color: 'black'\n    } : {}\n  }, \"SUBMIT\"))));\n};\n\nexport default ContactForm;","map":null,"metadata":{},"sourceType":"module"}