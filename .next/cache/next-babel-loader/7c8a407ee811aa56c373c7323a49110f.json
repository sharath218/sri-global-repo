{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport styles from '../styles/ContactForm.module.css';\nimport firebase from '../server/firebase';\nimport Select from './Select';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nvar initialValues = {\n  Name: '',\n  Email: '',\n  PhoneNumber: '',\n  Place: '',\n  Service: ''\n};\nvar validationSchema = Yup.object({\n  Name: Yup.string().required('Please Enter Parent Name'),\n  Email: Yup.string().email('Invalid email format').required('Email Required'),\n  PhoneNumber: Yup.string().matches(/^[6-9]\\d{9}$/, {\n    message: \"Please enter valid number.\",\n    excludeEmptyString: false\n  }).required('Phone number is required'),\n  Place: Yup.string().required('Please Choose a place'),\n  Service: Yup.string().required('Please Choose a place')\n});\nvar placeOptions = [{\n  key: 'Select a Place',\n  value: ''\n}, {\n  key: 'Place1',\n  value: 'Place1'\n}, {\n  key: 'Place2',\n  value: 'Place2'\n}, {\n  key: 'None',\n  value: 'None'\n}];\nvar serviceOptions = [{\n  key: 'Select a Place',\n  value: ''\n}, {\n  key: 'Place1',\n  value: 'Place1'\n}, {\n  key: 'Place2',\n  value: 'Place2'\n}, {\n  key: 'None',\n  value: 'None'\n}];\n\nvar ContactForm = function ContactForm() {\n  var _useState = useState(false),\n      success = _useState[0],\n      setSuccess = _useState[1];\n\n  function registerUser(_x, _x2) {\n    return _registerUser.apply(this, arguments);\n  }\n\n  function _registerUser() {\n    _registerUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref) {\n      var setSubmitting, resetForm, db;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setSubmitting = _ref.setSubmitting, resetForm = _ref.resetForm;\n              console.log('Form data', values);\n              console.log('form  submit start');\n              db = firebase.firestore();\n              _context.next = 6;\n              return db.collection('usersdb').add({\n                Name: values.Name,\n                Email: values.Email,\n                PhoneNumber: values.PhoneNumber,\n                Place: values.Place,\n                Service: values.Service,\n                dateCreated: new Date()\n              }).then(function () {\n                resetForm();\n                setSubmitting(false);\n                setSuccess(true);\n              })[\"catch\"](function (error) {// console.error(\"Error writing document: \", error);\n              });\n\n            case 6:\n              console.log('form  submit end');\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _registerUser.apply(this, arguments);\n  }\n\n  return __jsx(Formik, {\n    initialValues: initialValues,\n    validationSchema: validationSchema,\n    onSubmit: function onSubmit(values, _ref2) {\n      var setSubmitting = _ref2.setSubmitting,\n          resetForm = _ref2.resetForm;\n      setSuccess(false);\n      registerUser(values, {\n        setSubmitting: setSubmitting,\n        resetForm: resetForm\n      });\n    }\n  }, function (_ref3) {\n    var isSubmitting = _ref3.isSubmitting,\n        isValid = _ref3.isValid;\n    return __jsx(\"div\", {\n      className: styles.contactForm\n    }, success ? __jsx(\"p\", {\n      className: styles.succesmsg\n    }, \" Form Submission successful \\u2714\\uFE0F\") : null, isSubmitting ? __jsx(\"div\", {\n      className: styles.loader\n    }, \" \") : __jsx(Form, {\n      className: styles.form\n    }, __jsx(\"h1\", {\n      style: {\n        margin: \"0px 0px\"\n      }\n    }, \"Contact Us\"), __jsx(\"label\", {\n      htmlFor: \"Name\",\n      className: styles.formLabel\n    }, __jsx(\"span\", {\n      className: styles.contentName\n    }, \"Name\")), __jsx(Field, {\n      className: styles.formInput,\n      type: \"text\",\n      id: \"Name\",\n      name: \"Name\"\n    }), __jsx(\"p\", {\n      className: styles.ErrorMessage\n    }, __jsx(ErrorMessage, {\n      name: \"Name\"\n    }), \" \"), __jsx(\"label\", {\n      htmlFor: \"Email\",\n      className: styles.formLabel\n    }, __jsx(\"span\", {\n      className: styles.contentName\n    }, \"Email\")), __jsx(Field, {\n      className: styles.formInput,\n      type: \"text\",\n      id: \"Email\",\n      name: \"Email\"\n    }), __jsx(\"p\", {\n      className: styles.ErrorMessage\n    }, __jsx(ErrorMessage, {\n      name: \"Email\"\n    })), __jsx(\"label\", {\n      htmlFor: \"PhoneNumber\",\n      className: styles.formLabel\n    }, __jsx(\"span\", {\n      className: styles.contentName\n    }, \"Phone Number\")), __jsx(Field, {\n      className: styles.formInput,\n      type: \"tel\",\n      id: \"PhoneNumber\",\n      name: \"PhoneNumber\"\n    }), __jsx(\"p\", {\n      className: styles.ErrorMessage\n    }, __jsx(ErrorMessage, {\n      name: \"PhoneNumber\"\n    }), \" \"), __jsx(Select, {\n      name: \"Place\",\n      options: placeOptions,\n      className: styles.selectInput\n    }), __jsx(\"p\", {\n      className: styles.ErrorMessage\n    }, __jsx(ErrorMessage, {\n      name: 'Place'\n    })), __jsx(Select, {\n      name: \"Service\",\n      options: serviceOptions,\n      className: styles.selectInput\n    }), __jsx(\"p\", {\n      className: styles.ErrorMessage\n    }, __jsx(ErrorMessage, {\n      name: 'Service'\n    }), \" \"), __jsx(\"button\", {\n      disabled: !isValid || isSubmitting,\n      type: \"submit\",\n      className: styles.btnHover,\n      style: !isValid || isSubmitting ? {\n        type: 'disabled',\n        background: '#dddddd',\n        color: 'black'\n      } : {}\n    }, \"SUBMIT\")));\n  });\n};\n\nexport default ContactForm;","map":null,"metadata":{},"sourceType":"module"}